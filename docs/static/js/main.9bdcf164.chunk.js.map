{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCAtegory","setCategorie","useState","inputValue","setinputValue","onSubmit","e","preventDefault","cats","type","value","onChange","target","GetGifs","title","a","url","fetch","request","json","data","map","img","id","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","category","loading","state","setstate","useEffect","then","setTimeout","useFetchGifs","gif","GitExpertApp","categories","setcategories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAGaA,EAAc,SAAC,GAAuB,IAApBC,EAAmB,EAAnBA,aAC3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAOA,OACI,gCACI,6BAAKD,IACL,sBAAME,SARO,SAACC,GAClBA,EAAEC,iBACFN,GAAc,SAAAO,GAAI,OAAKL,GAAL,mBAAqBK,OACvCJ,EAAc,KAKV,SACI,uBAAOK,KAAK,OAAOC,MAAOP,EAAYQ,SAAW,SAACL,GAAD,OAAOF,EAAcE,EAAEM,OAAOF,gB,+BCflFG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACbC,EADa,0FAC4EF,EAD5E,gDAEGG,MAAMD,GAFT,cAEbE,EAFa,gBAGEA,EAAQC,OAHV,uBAGZC,EAHY,EAGZA,KAHY,kBAIZA,EAAKC,KAAK,SAAAC,GAAO,IAAD,EACnB,MAAO,CACHC,GAAID,EAAIC,GACRT,MAAOQ,EAAIR,MACXE,IAAG,UAAEM,EAAIE,cAAN,aAAE,EAAYC,iBAAiBT,SARvB,2CAAH,sDCEPU,EAAc,SAAC,GAAuB,EAArBH,GAAsB,IAAlBT,EAAiB,EAAjBA,MAAOE,EAAU,EAAVA,IACrC,OACI,sBAAKW,UAAU,OAAf,UACI,qBAAKC,IAAKZ,EAAKa,IAAKf,IACpB,6BAAMA,QCFLgB,EAAU,SAAC,GAAa,IAAZhB,EAAW,EAAXA,MAIrB,ECHwB,SAAEiB,GAC1B,MAA0B7B,mBAAS,CAC/BkB,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAU,WACNtB,EAASkB,GAAWK,MAAM,SAAAZ,GACtBa,YAAW,WACPH,EACI,CACId,KAAMI,EACNQ,SAAS,MAGlB,UAER,IAEIC,EDhBmBK,CAAaxB,GAA/BM,EAAR,EAAQA,KAAOY,EAAf,EAAeA,QAEf,OACI,gCACG,mCAAMlB,EAAN,OAEEkB,EAAU,aAAe,GAC3B,qBAAKL,UAAU,YAAf,SACKP,EAAKC,KAAK,SAAAkB,GAAG,OAAI,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aEX1CiB,EAAe,WACxB,MAAoCtC,mBAAS,CAAC,kBAA9C,mBAAOuC,EAAP,KAAmBC,EAAnB,KACA,OACI,gCACI,gDACA,uBACA,cAAC,EAAD,CAAazC,aAAcyC,IAC3B,8BAEQD,EAAWpB,KAAK,SAAAU,GAAQ,OAAM,cAAC,EAAD,CAASjB,MAAOiB,GAAeA,Y,MCLjFY,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9bdcf164.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nexport const AddCAtegory = ( { setCategorie} ) => {\r\n    const [inputValue, setinputValue] = useState('')\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        setCategorie( cats => [inputValue , ...cats] );\r\n        setinputValue('');\r\n    }\r\n    return (\r\n        <div>\r\n            <h2>{inputValue}</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <input type=\"text\" value={inputValue} onChange={ (e) => setinputValue(e.target.value) } />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","export const GetGifs = async (title) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=m9s9rFuxzAPaizgjKinNt9lEEcCD3O8O&q=${title}&limit=25&offset=0&rating=g&lang=en`;\r\n    const request = await fetch(url);\r\n    const {data} = await request.json();\r\n    return data.map( img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    } );\r\n} ","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={title} />\r\n            <h3>{ title }</h3>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\nexport const GifGrid = ({title}) => {\r\n    // const [count, setCount] = useState(0);\r\n    // const [Images, setImages] = useState([])\r\n\r\n    const { data , loading} = useFetchGifs(title);\r\n\r\n    return (\r\n        <div>\r\n           <h3> {title} </h3>\r\n           \r\n           { loading ? 'Cargado...' : ''}\r\n           <div className=\"container\">\r\n               {data.map( gif => <GifGridItem key={gif.id} {...gif} ></GifGridItem> )}\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport { useState, useEffect } from \"react\"\r\n\r\nimport { GetGifs } from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true,\r\n    })\r\n\r\n    useEffect(() => {\r\n        GetGifs( category ).then( images=>{\r\n            setTimeout(() => {\r\n                setstate(\r\n                    {\r\n                        data: images,\r\n                        loading: false,\r\n                    }\r\n                )\r\n            }, 1000);\r\n        })\r\n    }, [])\r\n\r\n    return state;\r\n}\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { AddCAtegory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GitExpertApp = () => {\r\n    const [categories, setcategories] = useState(['One punsh man'])\r\n    return (\r\n        <div>\r\n            <h2>GIF Expert APP</h2>\r\n            <hr></hr>\r\n            <AddCAtegory setCategorie={setcategories} ></AddCAtegory>\r\n            <div >\r\n                {\r\n                    categories.map( category => ( <GifGrid title={category} key={category} ></GifGrid>) )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GitExpertApp } from './GitExpertApp';\nimport './index.css';\n\n\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    <GitExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}